apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "outline.fullname" . }}
  labels:
    {{- include "outline.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "outline.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "outline.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "outline.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository | default "docker.getoutline.com/outlinewiki/outline" }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port | default 3000 }}
              protocol: TCP
              
          {{- if (.Values.livenessProbe).enabled | default true }}
          livenessProbe:
            httpGet:
              path: {{ (.Values.redinessProbe).path | default "/_health" | quote }}
              port: {{ (.Values.livenessProbe).port | default "http" }}
            initialDelaySeconds: {{ (.Values.livenessProbe).initialDelaySeconds | default 180 }}
            timeoutSeconds: {{ (.Values.livenessProbe).timeoutSeconds | default 5 }}
            periodSeconds: {{ (.Values.livenessProbe).periodSeconds | default 20 }}
            successThreshold: {{ (.Values.livenessProbe).successThreshold | default 1 }}
            failureThreshold: {{ (.Values.livenessProbe).failureThreshold | default 6 }}
          {{- end }}
          {{- if (.Values.redinessProbe).enabled | default true }}
          redinessProbe:
            httpGet:
              path: {{ (.Values.redinessProbe).path | default "/_health" | quote }}
              port: {{ (.Values.redinessProbe).port | default "http" }}
            initialDelaySeconds: {{ (.Values.redinessProbe).initialDelaySeconds | default 30 }}
            timeoutSeconds: {{ (.Values.redinessProbe).timeoutSeconds | default 5 }}
            periodSeconds: {{ (.Values.redinessProbe).periodSeconds | default 10 }}
            successThreshold: {{ (.Values.redinessProbe).successThreshold | default 1 }}
            failureThreshold: {{ (.Values.redinessProbe).failureThreshold | default 5 }}
          {{- end }}
          
          resources:
            {{- toYaml .Values.resources | nindent 12 }}

          # env: depends
          envFrom:
            - configMapRef:
                name: {{ include "outline.fullname" . }}-configmap
            - secretRef:
                name: {{ include "outline.fullname" . }}-secret
          
          env:
            - name: "NODE_ENV"
              value: "production"
            - name: OUTLINE_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "outline.database.secretName" . }}
                  key: {{ include "outline.database.passwordKey" . | quote }}
            {{- if (include "outline.redis.auth.enabled" .) }}
            - name: OUTLINE_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "outline.redis.secretName" . }}
                  key: {{ include "outline.redis.passwordKey" . | quote }}
            {{- end }}

            # env: direct get
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "outline.s3.secretName" . }}
                  key: {{ include "outline.s3.accessKeyIDKey" . | quote }}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "outline.s3.secretName" . }}
                  key: {{ include "outline.s3.secretAccessKeyKey" . | quote }}

            # combined
            - name: DATABASE_URL
              value: "postgresql://$(OUTLINE_DATABASE_USERNAME):$(OUTLINE_DATABASE_PASSWORD)@$(OUTLINE_DATABASE_HOST):$(OUTLINE_DATABASE_PORT_NUMBER)/$(OUTLINE_DATABASE_NAME)"
            - name: REDIS_URL
              value: "redis://:$(OUTLINE_REDIS_PASSWORD)@$(OUTLINE_REDIS_HOST):$(OUTLINE_REDIS_PORT)"

            # web envs
            - name: URL
              value: {{ default (index .Values.ingress.hosts 0).host .Values.url | quote }}
            - name: PORT
              value: {{ .Values.service.port | default 3000 | quote }}

            # troubleshooting
            # disable for now. TODO: postgresql.tls.enabled
            # "level":"error","message":"The database does not support SSL connections. Set the `PGSSLMODE` environment variable to `disable` or enable SSL on your database server."
            - name: PGSSLMODE
              value: "disable"

            
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
